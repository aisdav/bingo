from aiogram import Bot, types
from aiogram import Dispatcher
from aiogram.types import ParseMode
from aiogram.utils import executor
import aiogram
import random
import tracemalloc
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.markdown import escape_md
tracemalloc.start()
API_TOKEN = '6871615330:AAHepR2mQz-OccsMXDL1sgS8NrTOFxQVqbA'
ADMIN_ID = '832892390'
admin_id = [832892390,6427864248,6037168719,5671880832,713104739,1581568237,5224223665]

collecting = False
class ClientState(StatesGroup):
    collecting_users = State()
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
participants_list = []
random_num= []
pinned_message_id = None
total_numbers = []
typ= False

async def is_admin(user_id):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    return str(user_id) == ADMIN_ID


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    if message.from_user.id not in admin_id:
        return
    global random_num,participants_list,total_numbers
    random_num = []
    participants_list= []
    total_numbers= []
    await message.reply("–°—Ç–∞—Ä—Ç –∏–≥—Ä—ã üé∞

–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∏–≥—Ä—É –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π @user_name –∏ 5 —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 100:")


@dp.message_handler(commands=['bingo'])
async def start_game(message: types.Message, state: FSMContext):
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id not in admin_id:
        return
    try:
        await bot.unpin_chat_message(message.chat.id)
    except:
        pass
    global participants_list,collecting,random_num
    participants_list = []
    total_numbers = []
    random_num
    collecting = True
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–û—Ç–∫—Ä—ã—Ç–∞ –∑–∞–ø–∏—Å—å –Ω–∞ –∏–≥—Ä—É"
    await message.reply("–û—Ç–∫—Ä—ã—Ç–∞ –∑–∞–ø–∏—Å—å –Ω–∞ –∏–≥—Ä—É. –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –º–æ–≥—É—Ç –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã.\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ–∏ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 100 —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä: @username 1 2 3 4 5")
@dp.message_handler(commands=['roullet'])
async def start_game(message: types.Message):
    global participants_list,typ,random_num
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id not in admin_id:
        return
    try:
        await bot.unpin_chat_message(message.chat.id)
    except:
        pass
    participants_list = []
    total_numbers = []
    random_num =[]
    typ = True
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–û—Ç–∫—Ä—ã—Ç–∞ –∑–∞–ø–∏—Å—å –Ω–∞ –∏–≥—Ä—É"
    await message.reply("–û—Ç–∫—Ä—ã—Ç–∞ –∑–∞–ø–∏—Å—å –Ω–∞ –∏–≥—Ä—É. –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –º–æ–≥—É—Ç –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã.\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ–π username.–ù–∞–ø—Ä–∏–º–µ—Ä: @username")
@dp.message_handler(lambda message: message.text.startswith('@') and typ)
async def handle_participant_number(message: types.Message):
    global participants_list,typ
    if typ== True:
        username = message.text.split()[0]
        # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Å–ø–∏—Å–æ–∫
        participants_list.append(username)
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        await send_participant_message(message.chat.id)   

@dp.message_handler(lambda message: message.text.startswith('@') and collecting)
async def handle_participants_numbers(message: types.Message):
    global participants_list,collecting
    if collecting== True:

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_id = message.from_user.id
        username = message.text.split()[0][1:]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            parts = message.text.split()
            username = parts[0][1:] if parts[0].startswith('@') else None
            numbers = [int(num) for num in parts[1:]]
            print(username,numbers)
            if len(numbers) != 5 or any(num < 1 or num > 100 for num in numbers):
                raise ValueError()
        except ValueError:
            await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 5 —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 100.")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Å–ø–∏—Å–æ–∫
        participants_list.append((username, numbers))

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        await send_participants_message(message.chat.id)
async def send_participant_message(chat_id):
    text = "üìã–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n"
    for i, username in enumerate(participants_list, start=1):
        text += f"{i} {username}\n"
        if i < len(participants_list):  # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª ‚ûñ –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π
            text += "‚ûñ\n"
    print(participants_list)
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        chat = await bot.get_chat(chat_id)
        pinned_message_id = getattr(chat.pinned_message, 'message_id', None)

        if pinned_message_id:
            try:
                escaped_text = escape_md(text)
                await bot.edit_message_text(escaped_text, chat_id, pinned_message_id, parse_mode=ParseMode.MARKDOWN)
            except aiogram.utils.exceptions.MessageNotModified as e:
                if "Message is not modified" in str(e):
                        # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É "Message is not modified"
                    pass
                else:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞ "Message is not modified")
                    print(f"Error: {e}")
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º –µ–≥–æ
            try:
                escaped_text = escape_md(text)
                pinned_message = await bot.send_message(chat_id, escaped_text, parse_mode=ParseMode.MARKDOWN)
                await bot.pin_chat_message(chat_id, pinned_message.message_id)
            except Exception as e:
                print(f"Error while sending/pinning message: {e}")
    except Exception as e:
        print(f"Error while sending/pinning message: {e}")
async def send_participants_message(chat_id):
    global participants_list
    formatted_text = "üìã–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n"

    for i, (username, numbers) in enumerate(participants_list, start=1):
        # –ó–∞–º–µ–Ω—è–µ–º —Å–ª–µ—à –ø–µ—Ä–µ–¥ —Ü–∏—Ñ—Ä–∞–º–∏ –≤ –∫–∞–∂–¥–æ–º —á–∏—Å–ª–µ
        numbers_str = ' '.join(map(lambda x: str(x).replace('/', ''), numbers))
        formatted_text += f"{i} @{username} {numbers_str}\n"
        if i < len(participants_list):  # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª ‚ûñ –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π
            formatted_text += "‚ûñ\n"

        # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    chat = await bot.get_chat(chat_id)
    pinned_message_id = getattr(chat.pinned_message, 'message_id', None)

        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Ç–µ–∫—Å—Ç
    if pinned_message_id:
        try:
            escaped_text = escape_md(formatted_text )
            # print(f"Current text: {escaped_text}")
            await bot.edit_message_text(escaped_text, chat_id, pinned_message_id, parse_mode=ParseMode.MARKDOWN)
        except aiogram.utils.exceptions.MessageNotModified as e:
            if "Message is not modified" in str(e):
                # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É "Message is not modified"
                pass
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞ "Message is not modified")
                print(f"Error: {e}")
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º –µ–≥–æ
        try:
            escaped_text = escape_md(formatted_text)
            print(escaped_text)
            pinned_message = await bot.send_message(chat_id, escaped_text, parse_mode=ParseMode.MARKDOWN)
            await bot.pin_chat_message(chat_id, pinned_message.message_id)
        except Exception as e:
            print(f"Error while sending/pinning message: {e}")
    



@dp.message_handler(lambda message: message.text == "/stop" and collecting)
async def stop_game(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id not in admin_id:
        return
    global total_numbers,collecting,random_num
    random_num =[]
    total_numbers = []
    collecting = False
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —É–¥–∞–ª—è–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    global participants_list
    participants_list = []
    try:
        await bot.unpin_chat_message(chat_id=message.chat.id)
    except:
        pass
    await bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –∑–∞–∫—Ä—ã—Ç.")
@dp.message_handler(lambda message: message.text == "/over" and typ)
async def over_game(message: types.Message):
    global typ,participants_list,random_num
    total_numbers = []
    random_num= []
    typ = False
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id not in admin_id:
        return
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —É–¥–∞–ª—è–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    global participants_list
    await send_participant_message(message.chat.id)
    participants_list = []
    await bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –∑–∞–∫—Ä—ã—Ç.")
    await bot.unpin_chat_message(chat_id=message.chat.id)
    pinned_message_id = 0 
@dp.message_handler(commands=['random'])
async def generate_random(message: types.Message):
    global typ, participants

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id not in admin_id:
        return

    if typ:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Å–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥–æ–π /over.")
        return

    try:
        command_parts = message.text.split()
        if len(command_parts) == 3:
            _, start_range, end_range = command_parts
            start_range, end_range= int(start_range), int(end_range)
        else:
            raise ValueError()
    except (ValueError, IndexError):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /random start_range end_range.")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    random_number = random.sample(range(start_range, end_range + 1), 1)
    
    random_num.extend(random_number)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(random_num)
    await message.answer(f"üé≤ ·¥ò…™ Ä·¥Ä·¥õ·¥ás ·¥ã·¥¢  Ä·¥è·¥ú ü ü·¥á·¥õ\n\n" + "\n‚ûñ\n".join(map(str, random_num)))
@dp.message_handler(commands=['number'])
async def generate_numbers(message: types.Message):
    global random_num
   # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id not in admin_id:
        return
    random_num = []
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        chat = await bot.get_chat(message.chat.id)
        pinned_message_id = getattr(chat.pinned_message, 'message_id', None)
    except Exception as e:
        pass
        pinned_message_id = None

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 5 —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 100
    random_numbers = random.sample(range(1, 101), 5)
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    new_element = '‚ûñ'
    new_list = []
    for item in random_numbers:
        new_list.append(item)
        new_list.append(new_element)
    # –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏—à–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
    new_list.pop()
    total_numbers.extend(new_list)
    total_numbers.append('\n')

    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–ø–æ–ª–Ω—è–µ–º –µ–≥–æ
    if pinned_message_id:
        try:
            existing_message = await bot.edit_message_text(chat_id=message.chat.id,
                                                            message_id=pinned_message_id,
                                                            text=f"üé∞ ·¥ò…™ Ä·¥Ä·¥õ·¥ás ·¥ã·¥¢  ô…™…¥…¢·¥è:\n\n{''.join(map(str, total_numbers))}")
        except Exception as e:
            print(f"Error while editing pinned message: {e}")
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
        try:
            message_text = f"üé∞ ·¥ò…™ Ä·¥Ä·¥õ·¥ás ·¥ã·¥¢  ô…™…¥…¢·¥è:\n\n {''.join(map(str, total_numbers))}"
            escaped_text = escape_md(message_text)
            existing_message = await bot.send_message(message.chat.id, escaped_text, parse_mode=ParseMode.MARKDOWN)
            await bot.pin_chat_message(message.chat.id, existing_message.message_id)
        except Exception as e:
            print(f"Error while sending/pinning message: {e}")


if __name__ == '__main__':
    from aiogram import executor

    executor.start_polling(dp, skip_updates=True)
